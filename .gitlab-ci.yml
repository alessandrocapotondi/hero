variables:
  GIT_SUBMODULE_STRATEGY: recursive
  RUST_LOG: 'debug'
  HERO_INSTALL: '$CI_PROJECT_DIR/install'
  TEMP_JOB_DIR: '$CI_PROJECT_DIR/archive/hero_gitlab_ci_$CI_JOB_ID'
  DEPLOY_USER: 'hero'
  DEPLOY_HOST: 'localhost'
  DEPLOY_PATH: 'builds/$CI_COMMIT_REF_NAME'
  TEST_VP_PULP_SDK_EXAMPLES: 'helloworld'
  TEST_PULP_SDK_EXAMPLES: '$TEST_VP_PULP_SDK_EXAMPLES tests-pulp'
  TEST_VP_MIN_RT_EXAMPLES: 'hello'
  TEST_MIN_RT_EXAMPLES: '$TEST_VP_MIN_RT_EXAMPLES parMatrixMul'

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "huawei-2020"

before_script:
  - mkdir -p $HOME/buildcache/hero
  # Disable display in CI.
  - unset DISPLAY
  # Load key for deployment.
  - eval $(ssh-agent -s)
  - echo $SSH_PRIVATE_KEY | base64 -d | tr -d '\r' | ssh-add -
  - unset SSH_PRIVATE_KEY
  # Prepare deployment target.
  - export DEPLOY_REMOTE="$DEPLOY_USER@$DEPLOY_HOST"
  - export DEPLOY_TARGET="$DEPLOY_REMOTE:$DEPLOY_PATH"
  - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
  - ssh $DEPLOY_REMOTE "mkdir -p $DEPLOY_PATH"
  # Prepare local install directory.
  - mkdir -p "$HERO_INSTALL"
  - mkdir -p "$TEMP_JOB_DIR"

after_script:
  - chmod -R u+w "$HERO_INSTALL"
  - chmod -R u+w "$TEMP_JOB_DIR"
  - rm -rf "$TEMP_JOB_DIR"

stages:
  - build_toolchain
  - build_test_rest

lint_whitespace:
  stage: build_toolchain
  script:
    - git config --local core.whitespace 'blank-at-eol,space-before-tab,-indent-with-non-tab,
        -tab-in-indent,blank-at-eof,-cr-at-eol'
    - git diff --check origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  rules:
    - if: $CI_MERGE_REQUEST_ID

lint_spyglass:
  stage: build_toolchain
  script:
    - cd hardware/spyglass
    - ./run_spyglass.sh

test_synthesis:
  stage: build_test_rest
  script:
    ### Test elaboration for synthesis
    - |
      cd hardware/gf22fdx/synopsys
      ./start_synth.sh --elab-only | tee synth.log
      if grep -q '^Error:' synth.log; then
        echo "Elaboration had errors!"
        exit 1
      fi
      if rg -U --multiline-dotall --pcre2 -n \
          '^[[:blank:]]*?(?<!module )cluster_clock_gat.*?\);' unmapped/pulp_unmapped.v \
          | rg -U --multiline-dotall "test_en_i\(.*?1'b0.*?\)"; then
        echo "There are clock gates with unconnected 'test_en_i' input!"
        exit 1
      fi
      cd -

build_test_archive:
  stage: build_test_rest
  script:
    - ./pack_huawei.sh
    - memora get tc-pulp
    - cd "$TEMP_JOB_DIR"
    - cp "$CI_PROJECT_DIR/hero_huawei.tar.gz" .
    - tar xf hero_huawei.tar.gz && rm hero_huawei.tar.gz
    - export HERO_INSTALL_NEW="$(pwd)/install"
    - rsync -ua "$HERO_INSTALL/" "$HERO_INSTALL_NEW/"
    - export HERO_INSTALL="$HERO_INSTALL_NEW"
    - ls "$HERO_INSTALL_NEW"
    - ./setup.sh --no-tc-pulp --no-script-symlinks
    ### build RTL tests
    - source env/ehuawei-minimal-runtime.sh
    ### Import CI helper scripts.
    - cp -r "$CI_PROJECT_DIR/.gitlab-ci.d" .
    ### Test both simulators
    - .gitlab-ci.d/test-sims.sh $TEST_MIN_RT_EXAMPLES
    ### reconfigure to use PULP SDK
    - source env/esim.sh
    ### Test both simulators
    - .gitlab-ci.d/test-sims.sh $TEST_PULP_SDK_EXAMPLES
    ### Build the virtual platform
    - make virtual-platform
    - >
      for t in $TEST_VP_PULP_SDK_EXAMPLES $TEST_VP_MIN_RT_EXAMPLES; do
        ./pulp/virtual-platform/run_vp.sh $t
      done
  artifacts:
    paths:
    - hero_huawei.tar.gz

build_test_pulp-runtime:
  stage: build_test_rest
  script:
    - memora get tc-pulp
    ### Configure pulp-runtime
    - source env/ehuawei-minimal-runtime.sh
    ### Test both simulators
    - .gitlab-ci.d/test-sims.sh $TEST_MIN_RT_EXAMPLES
    ### Build the virtual platform
    - make virtual-platform
    - >
      for t in $TEST_VP_MIN_RT_EXAMPLES; do
        ./pulp/virtual-platform/run_vp.sh $t
      done
  artifacts:
    paths:
      - example-apps
      - pulp

build_test_sdk:
  stage: build_test_rest
  script:
    - memora get tc-pulp
    ### build accelerator sdk
    - ./pulp/setup-sdk.sh hero-huawei
    ### Configure for SDK
    - source env/esim.sh
    ### Test both simulators
    - .gitlab-ci.d/test-sims.sh $TEST_PULP_SDK_EXAMPLES
    ### Build the virtual platform
    - make virtual-platform
    - >
      for t in $TEST_VP_PULP_SDK_EXAMPLES; do
        ./pulp/virtual-platform/run_vp.sh $t
      done
  artifacts:
    paths:
      - example-apps
      - pulp

pulp_run_target_test:
  stage: build_test_rest
  script:
    - memora get tc-pulp
    - source env/ehuawei-minimal-runtime.sh
    ### compile testbench
    - cd hardware/vsim
    - ./compile.sh
    - cd -
    ### simulate examples
    - make -C example-apps/hello all run
    - cd -
  artifacts:
    paths:
      - example-apps

build_toolchain:
  stage: build_toolchain
  script:
    - env
    - >
      if ! memora lookup tc-pulp; then
        ./setup.sh --no-sdk-pulp --no-vp
        memora insert tc-pulp
      fi
